(Michael 195)
El lenguaje de todas las cadenas de 0's donde la longitud es potencia de 2

initial_state = 'q1'
accept_states = {'q6'}
reject_states = {'q7'}
transitions = {
    ('q1', '0'): ('q2', '_', 1),
    ('q1', 'x'): ('q7', 'x', 1),
    ('q1', '_'): ('q7', '_', 1),
    ('q2', '0'): ('q3', 'x', 1),
    ('q2', 'x'): ('q2', 'x', 1),
    ('q2', '_'): ('q6', '_', 1),
    ('q3', '0'): ('q4', '0', 1),
    ('q3', 'x'): ('q3', 'x', 1),
    ('q3', '_'): ('q5', '_', -1),
    ('q4', '0'): ('q3', 'x', 1),
    ('q4', 'x'): ('q4', 'x', 1),
    ('q4', '_'): ('q7', '_', 1),
    ('q5', '0'): ('q5', '0', -1),
    ('q5', 'x'): ('q5', 'x', -1),
    ('q5', '_'): ('q2', '_', 1),
}

##################################################################
(Hopcroft 275)
El lenguaje para calcular la funcion de sustracci√≥n propia

initial_state = 'q0'
accept_states = {'q6'}
reject_states = {'q7'}
transitions = {
    ('q0', '0'): ('q1', '_', 1),
    ('q0', '1'): ('q5', '_', 1),
    #('q0', '_'): ('', '', ),
    ('q1', '0'): ('q1', '0', 1),
    ('q1', '1'): ('q2', '1', 1),
    #('q1', '_'): ('', '', ),
    ('q2', '0'): ('q3', '1', -1),
    ('q2', '1'): ('q2', '1', 1),
    ('q2', '_'): ('q4', '_', -1),
    ('q3', '0'): ('q3', '0', -1),
    ('q3', '1'): ('q3', '1', -1),
    ('q3', '_'): ('q0', '_', 1),
    ('q4', '0'): ('q4', '0', -1),
    ('q4', '1'): ('q4', '_', -1),
    ('q4', '_'): ('q6', '0', 1),
    ('q5', '0'): ('q5', '_', 1),
    ('q5', '1'): ('q5', '_', 1),
    ('q5', '_'): ('q6', '_', 1),
}